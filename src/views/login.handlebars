<link rel="stylesheet" href="/authStyles.css">
<div class="login-container">
    <form id="loginForm" style="max-width: 300px;">
        <h2 style="text-align: center; margin: 0;">Login</h2>
        <a href="/signup">Don't have an account?</a>
        <section>
            <label for="email">Email</label>
            <input name="email" id="email" type="email" placeholder="Email" required>
        </section>
        <section>
            <label for="password">Password</label>
            <input name="password" id="password" type="password" placeholder="Password" required>
        </section>
        <button style="width: 100px; align-self: center;">Login</button>
    </form>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const loginForm = document.getElementById("loginForm");
        const emailInput = document.getElementById("email");
        const passwordInput = document.getElementById("password");
        const loadingOverlay = document.getElementById("loadingOverlay");
        loginForm.setAttribute('novalidate', '');

        loginForm.addEventListener("submit", (event) => {
            event.preventDefault()

            if(!emailInput.validity.valid){
                return showError("Invalid email address")
            } else if(!passwordInput.validity.valid){
                return showError("Invalid password")
            }

            const formData = new FormData(loginForm);
            const data = new URLSearchParams(formData);

            loginForm.classList.add('blurred');
            loadingOverlay.classList.add('active');

            fetch("/api/login", {
                method: "POST",
                body: data,
            }).then(response => response.json())
            .then(result => {
                loginForm.classList.remove('blurred');
                loadingOverlay.classList.remove('active');
                if(result.error){
                    return showError(result.error.message);
                }
                window.location.href = "/chats";
            })
        });
    });
</script>